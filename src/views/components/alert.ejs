<dialog>
  <div class="dialog-header">
    <h2 class="dialog-title">Alerta</h2>
    <i class="dialog-close fa-solid fa-xmark"></i>
  </div>

  <p class="dialog-body">Esto es un mensaje de alerta</p>

  <div class="dialog-btns">
    <button class="dialog-btn-primary">Ok</button>
    <button class="dialog-btn-secondary">Cancel</button>
  </div>
</dialog>

<script>
  const dialog = document.querySelector('dialog')
  const dialogTitle = document.querySelector('.dialog-title')
  const dialogBody = document.querySelector('.dialog-body')
  const dialogClose = document.querySelector('.dialog-close')
  const dialogPrimary = document.querySelector('.dialog-btn-primary')
  const dialogSecondary = document.querySelector('.dialog-btn-secondary') 

  const customAlert = {
    async error(title = 'Error', message = 'Ocurrió un error', pretitle = '🚨', btns = ['Ok']) { 
      return await showDialog({title, message, pretitle, btns})
    },
    async warning(title = 'Advertencia', message = 'Ocurrió una advertencia', pretitle = '⚠️', btns = ['Ok']) { 
      return await showDialog({title, message, pretitle, btns})
    },
    async info(title = 'Información', message = 'Esto es un easter egg', pretitle = '🚨', btns = ['Ok']) { 
      return await showDialog({title, message, pretitle, btns})
    },
    async question(title = 'Pregunta', message = 'Esto es una pregunta', pretitle = '🚨', btns = ['Ok', 'Cancelar']) {
      return await showDialog({title, message, pretitle, btns})
    }
  }

  const showDialog = (options) => {
    const {
      title = 'Alerta',
      message = 'Esto es un mensaje de alerta',
      pretitle = '',
      btns = ['Ok']
    } = options;

    const isValidButton = (btn) => btn !== '' && btn !== null && btn !== undefined;
    const listeners = [];

    const setupButton = (buttonElement, buttonText, resolveValue, resolve) => {
      if (!isValidButton(buttonText)) {
        buttonElement.style.display = 'none';
      } else {
        buttonElement.style.display = 'flex';
        buttonElement.innerText = buttonText;

        const handler = () => {
          dialog.close();
          dialog.style.display = 'none';
          resolve(resolveValue);
          cleanupListeners();
        };
        buttonElement.addEventListener('click', handler, { once: true });
        listeners.push(() => buttonElement.removeEventListener('click', handler));
      }
    };

    const cleanupListeners = () => {
      listeners.forEach((remove) => remove());
      listeners.length = 0;
    };

    return new Promise((resolve, reject) => {
      try {
        dialogTitle.innerText = (pretitle || '').padEnd(1, ' ') + title;
        dialogBody.innerText = message;

        setupButton(dialogPrimary, btns[0], true, resolve);
        setupButton(dialogSecondary, btns[1], false, resolve);

        const closeHandler = () => {
          dialog.close();
          dialog.style.display = 'none';
          resolve(null);
          cleanupListeners();
        };
        dialogClose.addEventListener('click', closeHandler, { once: true });
        listeners.push(() => dialogClose.removeEventListener('click', closeHandler));

        dialog.showModal();
        dialog.style.display = 'flex';
      } catch (error) {
        console.log('Error showing dialog', error);
        resolve(null);
      }
    });
  };

  window.customAlert = customAlert
</script>

<style>
  dialog {
    max-width: min(90%, 25rem);
    border: none;
    outline: none;
    background-color: var(--gray0);
    border-radius: 1rem;
    border: 1px solid var(--gray1);
    padding: 1.5rem;
    flex-direction: column;
    animation: show .3s ease-in-out;
  }

  dialog.show {
    display: flex;
  }

  dialog::backdrop {
    animation: show .3s ease-in-out;
    backdrop-filter: blur(2px) brightness(0.8);
  }

  .dialog-header {
    display: flex;
    justify-content: space-between;
    align-items: top;
    gap: 3rem;
  }

  .dialog-title {
    font-family: Montserrat;
    font-size: 1.7rem;
    font-weight: bolder;
    color: white;
    margin: 0;
  }

  .dialog-close {
    font-size: 1.8rem;
    color: rgb(255 255 255 / .5);
    cursor: pointer;
  }

  .dialog-body {
    font-family: Lato;
    font-size: 1.2rem;
    color: white;
    text-wrap: balance;
  }

  .dialog-btns {
    display: flex;
    justify-content: flex-start;
    gap: .5rem;
  }

  .dialog-btn-primary {
    flex: 3;
    background-color: var(--gray3);
  }

  .dialog-btn-secondary {
    flex: 1;
    background-color: var(--gray1);
    color: var(--gray3);
  }
</style>