---
  import Icon from "@components/common/Icon.astro";
  import CustomModal from "./CustomModal.astro";
---

<CustomModal  id="customAlert">
  <!-- Error -->
  <section hidden id="errorAlert">
    <Icon class="fill-danger h-22 mx-10 w-auto" name="sadFace" />
    <h2 class="text-danger">ERROR</h2>
    <div>
      <p class="text-text text-pretty">Un error ha ocurrido.</p>
      <small class="text-text/50 text-pretty">Porfavor, intenta nuevamente.</small>
    </div>
    <button onclick="window.customAlert.error.hide()"  class="bg-danger">
      Ok
    </button>
  </section>

  <!-- Success -->
  <section hidden id="successAlert">
    <Icon class="fill-success h-22 mx-10 w-auto" name="happyFace" />
    <h2 class="text-success">Todo bien</h2>
    <div>
      <p class="text-text text-pretty">Todo perfecto y tu?.</p>
      <small class="text-text/50 text-pretty">Holaaa</small>
    </div>
    <button onclick="window.customAlert.success.hide()" class="bg-success">
      Ok
    </button>
  </section>
</CustomModal>

<style>
  @reference "../../styles/global.css";

  section {
    @apply fixed flex flex-col gap-5 justify-center text-center items-center top-1/2 right-1/2 -translate-y-1/2 translate-x-1/2 p-8 xs:p-12 min-w-[370px] rounded-[1rem] border-2 border-gray1 bg-gray0 max-w-[90%];
  }

  h2 {
    @apply text-4xl font-bold;
  }

  p {
    @apply text-xl text-text font-bold max-w-[95%] mx-auto;
  }

  button {
    @apply font-bold rounded-md text-2xl text-text outline-none py-2 px-6 hover:cursor-pointer hover:brightness-75;
  }

  small {
    @apply text-lg text-text/50;
  }
</style>

<script>
  interface CustomAlertInterface {
    _showAlert: (type: string, title: string, body: string, extra?: string) => void;
    _hideAlert: () => void;
    error: {
      show: (title: string, body: string, extra?: string, callback?: () => void) => void;
      hide: () => void;
    };
    success: {
      show: (title: string, body: string, extra?: string, callback?: () => void) => void;
      hide: () => void;
    };
  }

  declare global {
    interface Window {
      customAlert: CustomAlertInterface;
    }
  }

  const handleCustomAlert = () => {
    const customAlertDialog = document.getElementById('customAlert') as HTMLDialogElement;
    const errorAlert = document.getElementById('errorAlert') as HTMLElement;
    const successAlert = document.getElementById('successAlert') as HTMLElement;

    if (!customAlertDialog || !errorAlert || !successAlert) return

    let closeCallback: null | Function = null

    const customAlert = {
      _showAlert: function (type: string, title: string, body: string, extra: string = '') {
        customAlert._hideAlert(false)
        window.customModal.show(customAlertDialog.id)
        const alert = type === 'error' ? errorAlert : successAlert;
        alert.hidden = false;
        const h2 = alert.querySelector('h2') as HTMLHeadingElement;
        const p = alert.querySelector('p') as HTMLParagraphElement;
        const small = alert.querySelector('small') as HTMLParagraphElement;

        if (title) {
          h2.innerHTML = title;
        }
        if (body) {
          p.innerHTML = body;
        }
        if (small) {
          small.innerHTML = extra;
        }
      },
      _hideAlert: function (withCallback=true) {
        errorAlert.hidden = true;
        successAlert.hidden = true;

        if (withCallback) {
          if (closeCallback) {
            closeCallback();
            closeCallback = null;
          }
        }
      },
      error: {
        show: function (title: string, body: string, extra: string = '', callback?: () => void) {
          closeCallback = callback || null;
          customAlert._showAlert('error', title, body, extra);
        },
        hide: function () {
          customAlert._hideAlert();
        }
      },
      success: {
        show: function (title: string, body: string, extra: string = '', callback?: () => void) {
          closeCallback = callback || null;
          customAlert._showAlert('success', title, body, extra);
        },
        hide: function () {
          customAlert._hideAlert();
        } 
      }
    }

    customAlertDialog.addEventListener("close", () => customAlert._hideAlert())

    window.customAlert = customAlert;
  }

  document.addEventListener('astro:page-load', handleCustomAlert)
</script>