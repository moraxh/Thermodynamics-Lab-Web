---
  const { id, class: className, ...rest } = Astro.props
  import Icon from "./Icon.astro"
---

<dialog id={id} class:list={["fixed outline-none top-0 left-0 min-h-screen min-w-screen bg-transparent backdrop:bg-black/70", className]}>
  <section class="dialog-section flex justify-center items-center min-w-screen min-h-screen p-16">
    <Icon name="xmark" class="close-btn fill-white w-5 absolute top-0 right-0 m-5 hover:cursor-pointer hover:brightness-50" />
    <slot />
  </section>
</dialog>

<style>
  dialog {
    transition: all .2s ease-in-out;
    opacity: 0;
    scale: .5;
  }

  dialog.show {
    opacity: 1;
    scale: 1;
  }

  dialog.show[open]::backdrop {
    animation: backdropBlur .2s ease-in-out forwards;
    animation-delay: .2s;
  }

  @keyframes backdropBlur {
    0% {
      backdrop-filter: blur(0px);
    }
    100% {
      backdrop-filter: blur(5px);
    } 
  }

</style>

<script>
import mod from "astro/zod";

  interface customModalInterface {
    show: (id: string) => void;
    hide: (id: string) => void;
  }

  declare global {
    interface Window {
      customModal: customModalInterface;  
    }
  }

  const body = document.querySelector('body') as HTMLBodyElement;

  const handleCancelModal = (ctx: any ,e: Event, id: string) => {
    e.preventDefault()
    ctx.hide(id)
  }

  const customModal = {
    eventCache: new Map(),

    show: function(id: string) {
      const modal = document.getElementById(id) as HTMLDialogElement;
      const closeBtn = modal.querySelector('.close-btn') as HTMLButtonElement;

      // Show modal
      body.style.overflow = 'hidden'; // Disable scroll
      modal.showModal();
      modal.classList.add('show');

      const cancelHandler = (e: Event) => handleCancelModal(this, e, id)
      const closeHandler = (e: Event) => this.hide(id)
      const clickCloseHandler = (e: Event) => {
        if ((e.target as HTMLElement).classList.contains('dialog-section')) {
          this.hide(id)
        }
      }

      this.eventCache.set(id, { cancelHandler, closeHandler, clickCloseHandler })

      // Esc key to close modal
      modal.addEventListener('cancel', cancelHandler, {once: true})
      // Close btn to close modal
      closeBtn.addEventListener('click', closeHandler, {once: true})
      // BG click to close modal
      modal.addEventListener('click', clickCloseHandler, {once: true})

      // Remove event listener when modal is closed
      modal.addEventListener('close', () => {
        const cached = this.eventCache.get(id)
        if (cached) {
          modal.removeEventListener('cancel', cached.cancelHandler)
          closeBtn.removeEventListener('click', cached.closeHandler)
          modal.removeEventListener('click', cached.clickCloseHandler)
          this.eventCache.delete(id)
        }
      }, {once: true})
    },
    hide: function(id: string) {
      const modal = document.getElementById(id) as HTMLDialogElement;
      modal.classList.remove('show')

      setTimeout(() => {
        body.style.overflow = 'auto'; // Enable scroll
        modal.close();
      }, 200); // Match the transition duration
    }
  }
  
  window.customModal = customModal;
</script>