---
  const { realUploadId, fakeUploadClass, instanceId=Math.random().toString(36).substring(2, 15) } = Astro.props
  import Icon from './Icon.astro';
---

<div id={`imageUpload_${instanceId}`} class="relative">
  <div class:list={[
    fakeUploadClass,
    "imageUploadFakeInput flex flex-col gap-3 justify-center items-center bg-contain bg-no-repeat bg-center w-80 aspect-square rounded-lg outline-2 outline-gray2 hover:cursor-pointer hover:brightness-105 transition-all duration-200"
    ]}>
    <Icon name="upload" class="fill-gray2 w-[25%]" />
    <p class="text-[1.3cqw] font-bold text-gray2">Subir Imagen</p>
  </div>
  <button class="imageUploadDeleteInput hidden p-2 rounded-full bg-red-500 hover:cursor-pointer hover:brightness-75 -translate-y-1/2 translate-x-1/2 transition-all duration-200 absolute top-0 right-0">
    <Icon name="xmark" class="fill-white w-3" />
  </button>
  <input id={realUploadId} type="file" name="image" class="imageUploadRealInput hidden" accept=".png, .jpg, .jpeg, .webp" required />
</div>

<script define:vars={{ instanceId }}>

  const handleImageUpload = () => {
    const container = document.getElementById(`imageUpload_${instanceId}`)

    if (!container) return

    const deleteImageButton = container.querySelector('.imageUploadDeleteInput')
    const realUpload = container.querySelector(".imageUploadRealInput")
    const fakeUpload = container.querySelector(".imageUploadFakeInput")

    const showImgOnFakeUpload = (url) => {
      fakeUpload.style.backgroundImage = `url(${url})`;

      // Hide all the children
      Array.from(fakeUpload.children).forEach(child => {
        child.classList.add("hidden")
      })

      deleteImageButton.classList.remove("hidden") // Show close button
    }

    const deleteImgOnFakeUpload = () => {
      fakeUpload.style.backgroundImage = "none";

      // Show the children
      Array.from(fakeUpload.children).forEach(child => {
        child.classList.remove("hidden")
      })

      deleteImageButton.classList.add("hidden") // Hide close button

      realUpload.value = ""; // Reset the file input value

      realUpload.dispatchEvent(new Event("delete")) // Trigger change event to reset the file input
    }

    fakeUpload.addEventListener("click", () => realUpload.click())
    deleteImageButton.addEventListener("click", deleteImgOnFakeUpload)

    realUpload.addEventListener("change", (e) => {
      const file = (e.target).files?.[0]
      if (file) {
        const reader = new FileReader()
        reader.onload = e => {
          const url = e.target?.result
          showImgOnFakeUpload(url)
        }
        reader.readAsDataURL(file)
      } else {
        deleteImgOnFakeUpload()
      }
    })

    // Reset the image when the dialog is closed
    const dialogParent = container.closest("dialog")

    if (dialogParent) {
      dialogParent.addEventListener("close", deleteImgOnFakeUpload)
    }
  }

  document.addEventListener("astro:page-load", handleImageUpload)
</script>